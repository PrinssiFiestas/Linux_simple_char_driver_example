INSTRUCTIONS TO MAKE A CHARACTER DEVICE DRIVER

//--------------------------------------------
//	WRITING C CODE
//------------------------------------------

Include following libraries:
<linux/init.h>
<linux/module.h>	
<linux/fs.h>		//for character driver support


Add license to access some important kernel functionality
MODULE_LICENSE("GPL");

//-------------------------------------

Write initialization function "__init int alusta(void)"
-"__init"-keyword frees the memory of the function from kernel ram after initialization
-"__init" can also be used for any function that's only required during initialization
-"__initdata"-keyword can be used to free the ram of global variables after initialization

Call register_chrdev(int id, const char[] name, struct file_operations fOp) inside alusta().
-id is the major number of the device

Initialize struct file_operations fOp obviously before alusta() with at least following values
struct file_operations fOp = {
	.owner	= THIS_MODULE,
	.open	= avausfunktio,
	.read	= lukufunktio,
	.write	= kirjotusfunktio,
	.relase	= sulkufunktio,
}

You can find the function prototypes for fOp functions from following directory:
/lib/modules/$(uname -r)/build/include/linux/fs.h

Write the file operation functions. 
-Return 0 from everything exept .write() which returns buffer size

Give the written function as an argument to following macro function:
module_init(alusta);

//---------------------------------------

Write exit function "void poista(void)"

Give the written function as an argument for following macro function:
module_exit(poista);

You can print stuff to /var/log/syslog with printk(KERN_ALERT const char[]) function. 
-Note the abcense of comma separator for the the macro and the string!

You can export symbols (func or var names) for other modules to be used with macro:
EXPORT_SYMBOLS(exportattavaSymboli);

Optional module parameters should be declared followingly:
#include <linux/moduleparam.h>
int muuttuja=0;
module_param(muuttuja, int, 0);
-Note that module_param() is a macro! Also note the added library!
-Module param can be initialized to any value but dont leave uninitialized!
-Last arg for module_param() macro is linux-style octal notation for permissions
-Allow users to change mod param after module insertion with E.g. 0644 as last arg

//------------------------------------------------
//	COMPILATION PROCESS
//-----------------------------------------------

cdev_init() and cdev_add() might make a couple of steps here obsolete! Learn them!

Write "obj.m := moduuli.o" to Makefile
-Assigning moduuli.o to obj.m tells the compiler to make a kernel module

With multiple files add all of them with "+=" operator.

You must link them together with required dependencies with following lines: 
obj-m := yhdistettyMod.o
yhdistetynMod-objs := moduuli1.o moduuli2.o
-In this example, file "yhdistettyMod.o" is yet to be made. . 

Make module with the following command:
make -C /lib/modules/$(uname -r)/build M=$PWD modules
-"M=$PWD" means Makefile=PrintWorkingDirectory

Compiled kernel module object can be added to kernel space with:
sudo insmod ./moduuli.ko
-You can optionally use module params like so: "sudo insmod ./moduuli.ko muuttuja=666"

You can confirm that your module was inserted to kernel space with the command "lsmod".

You can remove your added module with the command:
sudo rmmod moduuli

Path "/var/log/syslog" contains any logs written by printk(KERN_ALERT cons char[]) function.

Path "/proc/devices" contains your character device

Make a device entry (node) with:
sudo mknod -m 666 /dev/meitsin_ajuri c 69 0
- "666" is user access. Could be any octal argument
- "c" tells to make it a character driver
- "69" is the device/major number
. "0" is the instance/minor numberfds 

You can now access your driver that has been created to "/dev/meitsin_ajuri"
